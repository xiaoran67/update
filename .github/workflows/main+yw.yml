name: 'main ☞ output/full.txt ✔ + 拆分央视/卫视'

on:
  #schedule:
    #- cron: '00 21 * * *'  # 触发时间（UTC时间，可调整）
    #- cron: '00 09 * * *'  # 触发时间（UTC时间，可调整）
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'  # 手动触发默认环境

env:
  PYTHON_VERSION: '3.10'        # Python版本
  RETAIN_DAYS: 7                # 归档保留天数
  HISTORY_DIR: 'history'        # 归档目录
  FILES_TO_ARCHIVE: >-          # 需归档的文件（原有）
    output/full.txt
    output/simple.txt
    output/others.txt
    output/sports.html
    output/custom.txt
  # 新增外部IPTV处理配置
  IPTV_SOURCE_URL: "https://raw.githubusercontent.com/kakaxi-1/IPTV/refs/heads/main/ipv4.1.txt"  # 源文件URL
  TARGET_DIR: "手工区"          # 目标目录
  CCTV_FILE: "${{ env.TARGET_DIR }}/♪优质央视.txt"    # 央视输出文件
  SATELLITE_FILE: "${{ env.TARGET_DIR }}/♪优质卫视.txt"  # 卫视输出文件

jobs:
  run_job:
    runs-on: ubuntu-latest
    permissions:
      contents: write          # 允许写入仓库
      pull-requests: write     # 允许操作PR

    steps:
      ### 1. 拉取仓库代码 ###
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main  # 拉取main分支

      ### 2. 强制同步远程代码 ###
      - name: 强制同步远程代码
        run: git fetch --prune && git reset --hard origin/main  # 确保代码一致

      ### 3. 安装Python环境 ###
      - name: 安装Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      ### 4. 缓存依赖包 ###
      - name: 缓存依赖包
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip 
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      ### 5. 安装项目依赖 ###
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install opencc-python-reimplemented pytz || { 
            echo "依赖安装失败，重试一次"; 
            pip install opencc-python-reimplemented pytz; 
          }

      ### 6. 运行主脚本生成文件（原有逻辑）###
      - name: 同步代码并生成文件
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git reset --hard HEAD 
          git pull origin main --rebase || { 
            echo "变基冲突，自动覆盖";
            git rebase --abort;
            git pull origin main --force;
          }
          python main.py || { 
            echo "首次生成失败，重试"; 
            python main.py || { 
              echo "生成失败，终止"; 
              exit 1; 
            } 
          }

      ### 7. 校验原有生成文件（原有逻辑）###
      - name: 校验文件完整性
        run: |
          critical_files=("output/full.txt" "output/custom.txt")
          for file in "${critical_files[@]}"; do
            if [ ! -s "$file" ]; then
              echo "错误：$file 无效，终止";
              exit 1;
            fi
          done
          if ! grep -q "🌐央视频道,#genre#" "output/custom.txt"; then
            echo "错误：缺失关键分类，终止";
            exit 1;
          fi

      ### 8. 新增：下载并处理外部IPTV文件 ###
      - name: 下载并拆分央视/卫视频道
        run: |
          # 下载源文件
          curl -fSL "${{ env.IPTV_SOURCE_URL }}" -o temp_ipv4.txt
          if [ ! -f temp_ipv4.txt ]; then
            echo "错误：外部文件下载失败！"
            exit 1
          fi
          # 清理分组行（删除更新时间、#genre#）
          sed -e '/更新时间/d' -e '/#genre#/d' temp_ipv4.txt > temp_filtered.txt
          if [ ! -s temp_filtered.txt ]; then
            echo "错误：清理后无有效内容！"
            exit 1
          fi
          # 创建目标目录
          mkdir -p "${{ env.TARGET_DIR }}"
          # 提取央视（行首CCTV）
          grep "^CCTV" temp_filtered.txt > "${{ env.CCTV_FILE }}"
          if [ ! -s "${{ env.CCTV_FILE }}" ]; then
            echo "错误：央视文件为空！"
            exit 1
          fi
          # 提取卫视（含“卫视”关键字）
          grep "卫视" temp_filtered.txt > "${{ env.SATELLITE_FILE }}"
          if [ ! -s "${{ env.SATELLITE_FILE }}" ]; then
            echo "错误：卫视文件为空！"
            exit 1
          fi

      ### 9. 校验新生成的央视/卫视频道文件 ###
      - name: 校验手工区文件
        run: |
          if [ ! -s "${{ env.CCTV_FILE }}" ]; then
            echo "错误：${{ env.CCTV_FILE }} 无效！"
            exit 1
          fi
          if [ ! -s "${{ env.SATELLITE_FILE }}" ]; then
            echo "错误：${{ env.SATELLITE_FILE }} 无效！"
            exit 1
          fi

      ### 10. 清理历史归档（原有逻辑）###
      - name: 清理历史归档
        run: |
          mkdir -p ${{ env.HISTORY_DIR }}
          find ${{ env.HISTORY_DIR }} -name "*.zip" -type f -mtime +${{ env.RETAIN_DAYS }} -delete

      ### 11. 生成今日归档（原有逻辑，自动包含新文件）###
      - name: 生成今日归档
        run: |
          if git diff --quiet ${{ env.FILES_TO_ARCHIVE }} "${{ env.TARGET_DIR }}/"; then
            echo "文件未变，不生成归档";
          else
            current_datetime=$(date +"%Y%m%d_%H%M%S")
            zip_filename="${{ env.HISTORY_DIR }}/${current_datetime}_archive.zip"
            zip -j "${zip_filename}" ${{ env.FILES_TO_ARCHIVE }} "${{ env.TARGET_DIR }}/"*
            git add "${zip_filename}"
            echo "新归档：${zip_filename}"
          fi

      ### 12. 提交并推送所有更改（含原有文件+新文件）###
      - name: 提交并推送更改
        run: |
          # 添加所有生成文件（原有+手工区+归档）
          git add output/full.txt output/full.m3u output/simple.txt output/simple.m3u \
                  output/others.txt output/sports.html output/custom.txt output/custom.m3u \
                  ${{ env.HISTORY_DIR }}/ "${{ env.TARGET_DIR }}/"
          # 提交（无变更时忽略）
          git commit -m ":dragon: $(date +'%Y-%m-%d %H:%M:%S')" || echo "无变更需提交"
          # 处理冲突并推送
          git pull origin main --rebase --autostash --allow-unrelated-histories || git pull origin main --force
          git push origin main --force-with-lease || git push origin main --force

      ### 13. 保存所有生成文件（含新文件）###
      - name: 保存生成的文件
        uses: actions/upload-artifact@v4
        with:
          name: generated-files 
          path: |
            output/full.txt
            output/full.m3u
            output/simple.txt
            output/simple.m3u
            output/others.txt
            output/sports.html
            output/custom.txt
            output/custom.m3u
            ${{ env.HISTORY_DIR }}/*.zip
            ${{ env.TARGET_DIR }}/♪优质央视.txt
            ${{ env.TARGET_DIR }}/♪优质卫视.txt
